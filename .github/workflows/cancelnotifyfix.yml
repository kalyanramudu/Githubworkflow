name: Deploy SAM Application from Branch along with custom notification

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    outputs:
      build_start: ${{ steps.meta.outputs.build_start }}
    steps:
      - name: Set up meta-vars
        id: meta
        run: |
          echo "build_start=$(date +%s)" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v3
      # - name: Set up Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: '3.11'

      - name: Install AWS SAM CLI v1.140.0
        run: pip install aws-sam-cli==1.140.0

      - name: Load environment variables from branch file
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          FILE=".github/envs/${BRANCH}.env"

          if [ ! -f "$FILE" ]; then
            echo "‚ùå  Environment file $FILE not found!" && exit 1
          fi

          echo "‚úÖ Loading environment variables from $FILE"
          while IFS='=' read -r key value || [ -n "$key" ]; do
            if [[ "$key" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; then
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < "$FILE"
        shell: bash

      - name: Inject secrets into env
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          echo "üîí  Injecting secrets for $BRANCH"

          if [ "$BRANCH" = "Production" ]; then
            echo "AWS_DEFAULT_REGION=${{ secrets.PROD_AWS_REGION }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "API_KEY=${{ secrets.PROD_API_KEY }}" >> $GITHUB_ENV
            echo "PROD_AWS_ARN=${{ secrets.PROD_AWS_ARN }}" >> $GITHUB_ENV
          elif [ "$BRANCH" = "Development" ]; then
            echo "AWS_DEFAULT_REGION=${{ secrets.DEV_AWS_REGION }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "API_KEY=${{ secrets.DEV_API_KEY }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.PROD_AWS_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: SAM Build
        run: sam build

      - name: SAM Package
        run: |
          sam package \
            --output-template-file packaged.yaml \
            --s3-bucket ${{ env.S3_BUCKET }} \
            --s3-prefix ${{ env.S3_BUCKET_PREFIX }}

      - name: SAM Deploy
        run: |
          sam deploy \
            --template-file packaged.yaml \
            --stack-name ${{ env.APP_NAME }} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --region ${{ env.AWS_DEFAULT_REGION }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

  notify:
    if: always()
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Calculate build duration
        run: |
          BUILD_END=$(date +%s)
          BUILD_START=${{ needs.deploy.outputs.build_start }}
          DURATION=$((BUILD_END - BUILD_START))
          echo "DURATION=${DURATION}" >> $GITHUB_ENV

      - name: Generate Slack payload
        run: |
          export STATUS="${{ needs.deploy.result == 'success' && '‚úÖ Succeeded' || needs.deploy.result == 'failure' && '‚ùå Failed' || '‚ö†Ô∏è Cancelled' }}"
          export COLOR="${{ needs.deploy.result == 'success' && '#2eb886' || needs.deploy.result == 'failure' && '#e01e5a' || '#daa038' }}"
          export RUN_LOG_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_JOB="deploy"
          export GITHUB_WORKFLOW="${{ github.workflow }}"
          export GITHUB_EVENT_NAME="${{ github.event_name }}"
          export COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          export COMMIT_URL="${{ github.event.head_commit.url }}"
          export AUTHOR="${{ github.event.head_commit.author.name }}"
          export GITHUB_REF_NAME="${GITHUB_REF##*/}"
          export DURATION="${DURATION}"
          export SHORT_SHA="${GITHUB_SHA::7}"
          envsubst < .github/slack-configs/mail.template.json > slack_payload.json

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload-file-path: slack_payload.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Add Slack status to GitHub summary
        run: |
          echo "### ‚úÖ Slack notification sent successfully!" >> $GITHUB_STEP_SUMMARY
